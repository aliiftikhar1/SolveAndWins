generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  name      String
  role      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competition {
  id          Int           @id @default(autoincrement())
  title       String
  image       String?
  description String?
  status      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startedAt   DateTime?
  endedAt     DateTime?
  
  questions     Question[]
  participants  Participant[]
  results       Result[]
}

model Question {
  id            Int          @id @default(autoincrement())
  competitionId Int
  qText         String
  key           String
  op1           String
  op2           String
  op3           String
  op4           String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  competition   Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
}

model User {
  id            Int           @id @default(autoincrement())
  fullname      String
  email         String        @unique
  password      String
  address       String?
  fathername    String?
  education     String?
  institute     String?
  dob           DateTime?
  city          String?
  province      String?
  fbProfile     String?
  tiktok        String?
  whatsappNo    String?
  country       String?
  status        String?       @default("Pending")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  participants  Participant[]
  results       Result[]
  verifications Verification[]
}

model Result {
  id             Int          @id @default(autoincrement())
  competitionId  Int
  userId         Int
  noOfQuestions  Int
  correctAnswers Int
  score          Float
  timeAttempted  DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  competition    Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Participant {
  id             Int          @id @default(autoincrement())
  competitionId  Int
  userId         Int
  attemptCount   Int          @default(1)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  competition    Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id     Int     @id @default(autoincrement())
  title  String
  text   String
  url    String
}

model Verification {
  id             Int      @id @default(autoincrement())
  userId         Int
  verified       Boolean  @default(false)
  verificationNo Int

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Prize {
  id        Int         @id @default(autoincrement())
  image     String
  title     String
  description String

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

}

model Blogcategories{
  id              Int     @id @default(autoincrement())
  title           String?
  description     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}


model Blog {
  id                Int      @id @default(autoincrement())
  title             String
  description       String   @db.Text
  image             String
  category          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  meta_description  String?
  meta_title        String?
  meta_focusKeyword String?
  web_slug          String?
}
